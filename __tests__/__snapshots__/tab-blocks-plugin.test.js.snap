// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tab blocks plugin base example 1`] = `
"import Tabs from '@theme/Tabs';

import TabItem from '@theme/TabItem';

<Tabs groupId=\\"code-examples\\">

<TabItem value=\\"js\\" label=\\"JavaScript\\">

\`\`\`js tab
console.log(\\"this is JS\\");
\`\`\`

</TabItem>

<TabItem value=\\"ts\\" label=\\"TypeScript\\">

\`\`\`ts tab
console.log(\\"this is TS\\");
\`\`\`

</TabItem>

</Tabs>
"
`;

exports[`tab blocks plugin can be nested inside an admonition 1`] = `
"import Tabs from '@theme/Tabs';

import TabItem from '@theme/TabItem';

### \`fakeTimers\` \\\\[object]

Default: \`{}\`

The fake timers may be useful when a piece of code sets a long timeout that we don't want to wait for in a test.

:::tip

Instead of including \`jest.useFakeTimers()\` in each test file, you can enable fake timers globally for all tests in your Jest configuration:

<Tabs groupId=\\"code-examples\\">

<TabItem value=\\"js\\" label=\\"JavaScript\\">

\`\`\`js tab
/** @type {import('jest').Config} */
const config = {
  fakeTimers: {
    enableGlobally: true,
  },
};

module.exports = config;
\`\`\`

</TabItem>

<TabItem value=\\"ts\\" label=\\"TypeScript\\">

\`\`\`ts tab
import type { Config } from \\"jest\\";

const config: Config = {
  fakeTimers: {
    enableGlobally: true,
  },
};

export default config;
\`\`\`

</TabItem>

</Tabs>

:::

Configuration options:
"
`;

exports[`tab blocks plugin does not re-import tabs components when already imported above 1`] = `
"import Tabs from '@theme/Tabs';

import TabItem from '@theme/TabItem';

<Tabs groupId=\\"code-examples\\">

<TabItem value=\\"js\\" label=\\"JavaScript\\">

\`\`\`js tab
console.log(\\"this is JS\\");
\`\`\`

</TabItem>

<TabItem value=\\"ts\\" label=\\"TypeScript\\">

\`\`\`ts tab
console.log(\\"this is TS\\");
\`\`\`

</TabItem>

</Tabs>
"
`;

exports[`tab blocks plugin does not re-import tabs components when already imported below 1`] = `
"<Tabs groupId=\\"code-examples\\">

<TabItem value=\\"js\\" label=\\"JavaScript\\">

\`\`\`js tab
console.log(\\"this is JS\\");
\`\`\`

</TabItem>

<TabItem value=\\"ts\\" label=\\"TypeScript\\">

\`\`\`ts tab
console.log(\\"this is TS\\");
\`\`\`

</TabItem>

</Tabs>

import Tabs from '@theme/Tabs';

import TabItem from '@theme/TabItem';
"
`;

exports[`tab blocks plugin full example 1`] = `
"import Tabs from '@theme/Tabs';

import TabItem from '@theme/TabItem';

### \`displayName\` \\\\[string, object]

Default: \`undefined\`

Allows for a label to be printed alongside a test while it is running. This becomes more useful in multi-project repositories where there can be many jest configuration files. This visually tells which project a test belongs to.

<Tabs groupId=\\"code-examples\\">

<TabItem value=\\"js\\" label=\\"JavaScript\\">

\`\`\`js tab
/** @type {import('jest').Config} */
const config = {
  displayName: \\"CLIENT\\",
};

module.exports = config;
\`\`\`

</TabItem>

<TabItem value=\\"ts\\" label=\\"TypeScript\\">

\`\`\`ts tab
import type { Config } from \\"jest\\";

const config: Config = {
  displayName: \\"CLIENT\\",
};

export default config;
\`\`\`

</TabItem>

</Tabs>

Alternatively, an object with the properties \`name\` and \`color\` can be passed.

### \`fakeTimers\` \\\\[object]

Default: \`{}\`

The fake timers may be useful when a piece of code sets a long timeout that we don't want to wait for in a test.

:::tip

Instead of including \`jest.useFakeTimers()\` in each test file, you can enable fake timers globally for all tests in your Jest configuration:

<Tabs groupId=\\"code-examples\\">

<TabItem value=\\"js\\" label=\\"JavaScript\\">

\`\`\`js tab
/** @type {import('jest').Config} */
const config = {
  fakeTimers: {
    enableGlobally: true,
  },
};

module.exports = config;
\`\`\`

</TabItem>

<TabItem value=\\"ts\\" label=\\"TypeScript\\">

\`\`\`ts tab
import type { Config } from \\"jest\\";

const config: Config = {
  fakeTimers: {
    enableGlobally: true,
  },
};

export default config;
\`\`\`

</TabItem>

</Tabs>

:::

\`.mockImplementation()\` can also be used to mock class constructors:

<Tabs groupId=\\"code-examples\\">

<TabItem value=\\"js\\" label=\\"JavaScript\\">

\`\`\`js tab={\\"span\\":2} title=\\"SomeClass.js\\"
module.exports = class SomeClass {
  method(a, b) {}
};
\`\`\`

\`\`\`js title=\\"SomeClass.test.js\\"
const SomeClass = require(\\"./SomeClass\\");

jest.mock(\\"./SomeClass\\"); // this happens automatically with automocking

const mockMethod = jest.fn();
SomeClass.mockImplementation(() => {
  return {
    method: mockMethod,
  };
});

const some = new SomeClass();
some.method(\\"a\\", \\"b\\");

console.log(\\"Calls to method: \\", mockMethod.mock.calls);
\`\`\`

</TabItem>

<TabItem value=\\"ts\\" label=\\"TypeScript\\">

\`\`\`ts tab={\\"span\\":2} title=\\"SomeClass.ts\\"
export class SomeClass {
  method(a: string, b: string): void {}
}
\`\`\`

\`\`\`ts title=\\"SomeClass.test.ts\\"
import { SomeClass } from \\"./SomeClass\\";

jest.mock(\\"./SomeClass\\"); // this happens automatically with automocking

const mockMethod = jest.fn<(a: string, b: string) => void>();
SomeClass.mockImplementation(() => {
  return {
    method: mockMethod,
  };
});

const some = new SomeClass();
some.method(\\"a\\", \\"b\\");

console.log(\\"Calls to method: \\", mockMethod.mock.calls);
\`\`\`

</TabItem>

</Tabs>
"
`;

exports[`tab blocks plugin ignores incomplete spans 1`] = `
"\`\`\`js tab={\\"span\\":2}
console.log(\\"this is first a codeblock\\");
\`\`\`

\`\`\`js
console.log(\\"this is second a codeblock\\");
\`\`\`

\`\`\`js tab={\\"span\\":3}
console.log(\\"this is first a codeblock\\");
\`\`\`

\`\`\`js
console.log(\\"this is second a codeblock\\");
\`\`\`

Third codeblock went missing.

\`\`\`ts tab={\\"span\\":2}
console.log(\\"this is a code \\");
\`\`\`
"
`;

exports[`tab blocks plugin respects title meta 1`] = `
"import Tabs from '@theme/Tabs';

import TabItem from '@theme/TabItem';

\`.mockImplementation()\` can also be used to mock class constructors:

<Tabs groupId=\\"code-examples\\">

<TabItem value=\\"js\\" label=\\"JavaScript\\">

\`\`\`js tab title=\\"SomeClass.js\\"
module.exports = class SomeClass {
  method(a, b) {}
};
\`\`\`

</TabItem>

<TabItem value=\\"ts\\" label=\\"TypeScript\\">

\`\`\`ts tab title=\\"SomeClass.ts\\"
export class SomeClass {
  method(a: string, b: string): void {}
}
\`\`\`

</TabItem>

</Tabs>

### \`mockFn.mockImplementationOnce(fn)\`

Accepts a function that will be used as an implementation of the mock for one call to the mocked function. Can be chained so that multiple function calls produce different results.
"
`;

exports[`tab blocks plugin supports span meta 1`] = `
"import Tabs from '@theme/Tabs';

import TabItem from '@theme/TabItem';

<Tabs groupId=\\"code-examples\\">

<TabItem value=\\"js\\" label=\\"JavaScript\\">

\`\`\`js tab={\\"span\\":2}
console.log(\\"this is first JS codeblock in a tab\\");
\`\`\`

\`\`\`js
console.log(\\"this is second JS codeblock in a tab\\");
\`\`\`

</TabItem>

<TabItem value=\\"ts\\" label=\\"TypeScript\\">

\`\`\`ts tab={\\"span\\":2}
console.log(\\"this is first TS codeblock in a tab\\");
\`\`\`

\`\`\`ts
console.log(\\"this is second TS codeblock in a tab\\");
\`\`\`

</TabItem>

</Tabs>

Some text

\`\`\`ts title=\\"some-file.ts\\"
console.log(\\"this is just code\\");
\`\`\`
"
`;
